class Typescript::Routes::Generator
  class << self
    include Actions
    include Paths

    def generate
      write_to_file(build_file.join("\n"))
    end

    def auto_generate
      return unless Rails.env.development?

      Listen.to(Rails.root.join('config'), only: /routes.rb$/) do |modified, _added, _removed|
        Rails.logger.info "File(s) Changed (#{modified}) -- updating typescript routes"
        generate
      end.start
    end

    def notify_changes
      return unless Rails.env.development?

      Listen.to(Rails.root.join('config'), only: /routes.rb$/) do |_modified, _added, _removed|
        notify '--------------------------------------------------------------------'
        notify ' routes.rb has been changed'
        notify ' run \'rails ts:generate:routes\' to update client routes'
        notify '--------------------------------------------------------------------'
      end.start
    end

    def models_file_path
      Rails.root.join('app/javascript/routes.ts')
    end

    # terms to check for exclusion from routes output
    EXCLUSIONS = %w[action_mailbox rails].freeze

    def routes
      Rails.application.routes.routes.map { |route| normalize_route(route) }.filter do |route|
        EXCLUSIONS.none? { |term| route[:path].include?(term) || route[:controller]&.include?(term) }
      end
    end

    def normalize_route(route)
      {
        path: route.path.spec.to_s.chomp('(.:format)'),
        verb: route.verb,
        controller: route.requirements[:controller],
        action: route.requirements[:action]
      }
    end

    def routes_by_path
      routes.group_by { |route| route[:path] }.transform_values { |routes| routes.map { |route| route[:verb] } }
    end

    def routes_by_controller
      routes.group_by { |route| route[:controller] }
    end

    private

    def notify(message)
      Rails.logger.info "\e[36m#{message}\e[0m"
    end

    def routes_file_header
      [
        '// DO NOT MODIFY',
        '//',
        '// This file was automatically generated by Typescript::Routes::Generate.  Please do not attempt to resolve',
        '// merge conflicts manually but instead run `rails ts:generate:routes` after resolving all conflicts within',
        '// config/routes.rb',
        '//'
      ]
    end

    def build_file
      out = routes_file_header
      out << 'import { handle } from "./router";'
      out << ''
      out.concat(build_controllers)
      out << ''
      out.concat(build_paths)
    end

    def write_to_file(content)
      File.open(models_file_path, 'w') { |file| file.write(content) }
    end
  end
end
