- title "#{@team.name} #{@season.name} Schedule"
- last_month = nil
- content_for :banner do
  .row.banner
    = render :partial => "team", :locals => { :team => @team, :class_name => "col-xs-12" }
.visible-xs
  .row.options
    .col-sm-4
      = select("team", :id, @team_links, { :selected => request.fullpath }, { :class => "form-control redirect_to" })
    .col-sm-4.col-sm-offset-4
      %a.btn.btn-default.btn-block{ :href => url_for(params.merge(:format => :ics))}
        %i.icon-calendar.icon-white
        Download As iCal
  .row
    .col-xs-12
      %table.table.table-striped.table-bordered
        - @events.each do |event|
          - month = event.starts_on.strftime('%B')
          - future = event.starts_on.future?
          - if month != last_month
            - reset_cycle()
            %tr
              %th= month
            - last_month = month
            - last_future = future
          %tr
            %td
              %span= event.starts_on.strftime('%a, %b %e') + " :: "
              %span= display_time_or_result(event, @team) + " " + display_event_summary(event, @team)
              %span= event.try(:location).try(:name)
.hidden-xs
  .row.options
    .col-sm-4
      = select("team", :id, @team_links, { :selected => request.fullpath }, { :class => "form-control redirect_to" })
    .col-sm-4.col-sm-offset-4
  .row
    .col-xs-12
      %table.table.table-striped.table-bordered
        - @events.each do |event|
          - month = event.starts_on.strftime('%B')
          - future = event.starts_on.future?
          - if month != last_month
            - reset_cycle()
            %tr
              %th.span2= month
              %th.span4 EVENT
              %th.span3 TIME / RESULT
              %th.span3 LOCATION
            - last_month = month
            - last_future = future
          %tr
            %td.span2= event.starts_on.strftime('%a, %b %e')
            %td.span4= display_event_summary(event, @team)
            %td.span3= display_time_or_result(event, @team)
            %td.span3= event.try(:location).try(:name)

